<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>OYHY.ME</title><link href="http://blog.oyhy.me/" rel="alternate"></link><link href="http://blog.oyhy.me/feeds/coding.atom.xml" rel="self"></link><id>http://blog.oyhy.me/</id><updated>2019-01-23T00:00:00+08:00</updated><entry><title>npm和yarn的淘宝镜像添加</title><link href="http://blog.oyhy.me/add_npm_yarn_registry.html" rel="alternate"></link><published>2019-01-23T00:00:00+08:00</published><author><name>Ronald White</name></author><id>tag:blog.oyhy.me,2019-01-23:add_npm_yarn_registry.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;NPM:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm config &lt;span class="nb"&gt;set&lt;/span&gt; registry https://registry.npm.taobao.org
npm config &lt;span class="nb"&gt;set&lt;/span&gt; disturl https://npm.taobao.org/dist
npm config &lt;span class="nb"&gt;set&lt;/span&gt; electron_mirror https://npm.taobao.org/mirrors/electron/
npm config &lt;span class="nb"&gt;set&lt;/span&gt; sass_binary_site https://npm.taobao.org/mirrors/node-sass/
npm config &lt;span class="nb"&gt;set&lt;/span&gt; phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;YARN:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn config &lt;span class="nb"&gt;set&lt;/span&gt; registry https://registry.npm.taobao.org -g
yarn config &lt;span class="nb"&gt;set&lt;/span&gt; disturl https://npm.taobao.org/dist -g
yarn config &lt;span class="nb"&gt;set&lt;/span&gt; electron_mirror https://npm.taobao.org/mirrors/electron/ -g
yarn config &lt;span class="nb"&gt;set&lt;/span&gt; sass_binary_site https://npm.taobao.org/mirrors/node-sass/ -g
yarn config &lt;span class="nb"&gt;set&lt;/span&gt; phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/ -g
yarn config &lt;span class="nb"&gt;set&lt;/span&gt; chromedriver_cdnurl https://cdn.npm.taobao.org/dist/chromedriver -g
yarn config &lt;span class="nb"&gt;set&lt;/span&gt; operadriver_cdnurl https://cdn.npm.taobao.org/dist/operadriver -g
yarn config &lt;span class="nb"&gt;set&lt;/span&gt; fse_binary_host_mirror https://npm.taobao.org/mirrors/fsevents -g
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;持久化文件路径在&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.yarnrc&lt;/code&gt; 和 &lt;code&gt;~/.npmrc&lt;/code&gt;&lt;/p&gt;</summary><category term="node"></category><category term="javascript"></category><category term="npm"></category><category term="yarn"></category></entry><entry><title>Windows 换行符为什么设计成 CR+LF？</title><link href="http://blog.oyhy.me/cr-lf-and-lf.html" rel="alternate"></link><published>2019-01-04T00:00:00+08:00</published><author><name>Ronald White</name></author><id>tag:blog.oyhy.me,2019-01-04:cr-lf-and-lf.html</id><summary type="html">&lt;p&gt;CR 和 LF 最初是控制电传打印机（Teletype，所以 UNIX 里面有个 tty，就是这玩意的缩写）的，CR 把打印头移动到行首，LF 把纸上卷一行，因为 CR 要的时间更长所以一般要求换行的过程里面都是 CR 在前（有些早期设备甚至还会在 CR 和 LF 之间插 NUL，确保打印头完成复位）。DOS 从 DEC 和 CP/M 那里继承了这个设计，这样文本文件的字节序列可以直接控制打印机。而 Unix 的前身 Multics 里面有一个驱动程序，会自动将 LF 转换成 CR-LF（甚至 CR-NUL-LF），所以他们用了单一的 LF。&lt;/p&gt;
&lt;p&gt;而 Windows 是从 DOS 而来的，所以继承了这个&lt;code&gt;传统&lt;/code&gt;。&lt;/p&gt;</summary><category term="windows"></category><category term="unix"></category><category term="dos"></category></entry><entry><title>Greenplum 在 Ubuntu 上的安装与配置</title><link href="http://blog.oyhy.me/greenplum-on-ubuntu.html" rel="alternate"></link><published>2018-01-24T00:00:00+08:00</published><author><name>Ronald White</name></author><id>tag:blog.oyhy.me,2018-01-24:greenplum-on-ubuntu.html</id><summary type="html">&lt;h2 id="_1"&gt;安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;参考：&lt;a href="http://greenplum.org/install-greenplum-oss-on-ubuntu/"&gt;来源&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加 PPA： &lt;code&gt;sudo add-apt-repository ppa:greenplum/db&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;更新 APT 仓库： &lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装： &lt;code&gt;sudo apt-get install greenplum-db-oss&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装之后，会在&lt;code&gt;/opt/gpdb&lt;/code&gt;目录中添加所有 greenplum 的依赖以及工具。&lt;/p&gt;
&lt;h3 id="_2"&gt;初始化环境&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在shell中执行 &lt;code&gt;. /opt/gpdb/greenplum_path.sh&lt;/code&gt;，或添加到 &lt;code&gt;~/.bashrc&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;拷贝基础配置到项目目录：&lt;code&gt;cp $GPHOME/docs/cli_help/gpconfigs/gpinitsystem_singlenode .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编辑此文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建此文件并写入当前主机名&lt;/span&gt;
&lt;span class="nv"&gt;MACHINE_LIST_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./hostlist_singlenode

&lt;span class="c1"&gt;# 编辑以下这行，指定数据目录，并确保目录已经存在，如：&lt;/span&gt;
&lt;span class="nb"&gt;declare&lt;/span&gt; -a &lt;span class="nv"&gt;DATA_DIRECTORY&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;/gpdata1 /gpdata2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;declare&lt;/span&gt; -a &lt;span class="nv"&gt;DATA_DIRECTORY&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;/home/inovick/primary /home/inovick/primary&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 修改下面这行，更换为当前主机名&lt;/span&gt;
&lt;span class="nv"&gt;MASTER_HOSTNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hostname_of_machine
&lt;span class="nv"&gt;MASTER_HOSTNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ubuntu

&lt;span class="c1"&gt;# 修改下面这行，指定 master 数据目录，并确保目录已存在&lt;/span&gt;
&lt;span class="nv"&gt;MASTER_DIRECTORY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/inovick/master
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;初始化数据库连接配置：&lt;code&gt;gpssh-exkeys -f hostlist_singlenode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始化数据库： &lt;code&gt;gpinitsystem -c gpinitsystem_singlenode&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上步骤完成后，数据库就已经启动了，但是在下次启动的时候需要配置环境变量 &lt;code&gt;MASTER_DATA_DIRECTORY&lt;/code&gt;,&lt;br /&gt;
此变量需要指向配置文件中 &lt;code&gt;MASTER_DIRECTORY&lt;/code&gt; 目录下的 &lt;code&gt;gpsne-1&lt;/code&gt; 目录。&lt;/p&gt;
&lt;h2 id="greenplum"&gt;配置greenplum&lt;/h2&gt;
&lt;p&gt;greenplum master的配置文件保存在 &lt;code&gt;MASTER_DIRECTORY&lt;/code&gt; 目录下的 &lt;code&gt;gpsne-1&lt;/code&gt; 目录，&lt;br /&gt;
包含 postgresql 的相关配置如： &lt;code&gt;pg_hba.conf&lt;/code&gt;, &lt;code&gt;postgresql.conf&lt;/code&gt; 等。&lt;/p&gt;
&lt;p&gt;编辑相关配置后需要重新reload，reload命令： &lt;code&gt;gpstop -u&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动 master 为维护模式，只有管理员可登录： &lt;code&gt;gpstart -m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;维护终端连接方式：&lt;code&gt;PGOPTIONS='-c gp_session_role=utility' psql postgres&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;完成维护后恢复为生产模式： &lt;code&gt;gpstop -mr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="greenplum_1"&gt;停止greenplum服务&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;gpstop&lt;/code&gt; 命令&lt;/p&gt;</summary><category term="postgresql"></category><category term="greenplum"></category><category term="database"></category><category term="ubuntu"></category></entry><entry><title>WeRobot 项目截图</title><link href="http://blog.oyhy.me/werobot-screenshots.html" rel="alternate"></link><published>2017-01-09T00:00:00+08:00</published><author><name>Ronald White</name></author><id>tag:blog.oyhy.me,2017-01-09:werobot-screenshots.html</id><summary type="html">
&lt;h3 id="_1"&gt;用户管理&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="images/WeRobot_UI_users.png"/&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;欢迎信息&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="images/WeRobot_UI_welcome.png"/&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;简单应答&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="images/WeRobot_UI_message.png"/&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;图文消息&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="images/WeRobot_UI_media.png"/&gt;&lt;/p&gt;
&lt;h3 id="_5"&gt;图片素材&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="images/WeRobot_UI_pictures.png"/&gt;&lt;/p&gt;
&lt;h3 id="_6"&gt;菜单管理&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="images/WeRobot_UI_menu.png"/&gt;&lt;/p&gt;
&lt;h3 id="_7"&gt;二维码&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="images/WeRobot_UI_qrcode.png"/&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;公众号绑定&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="images/WeRobot_UI_accounts.png"/&gt;&lt;/p&gt;</summary><category term="django"></category><category term="python"></category><category term="wechat"></category></entry><entry><title>ECMAscript Startup (1)</title><link href="http://blog.oyhy.me/es-startup-01.html" rel="alternate"></link><published>2016-08-10T00:00:00+08:00</published><author><name>Ronald White</name></author><id>tag:blog.oyhy.me,2016-08-10:es-startup-01.html</id><summary type="html">&lt;h3 id="ecmascript"&gt;ECMAscript 简介&lt;/h3&gt;
&lt;p&gt;ECMAscript 简称 ES。之前 ECMAscript 发布了5个版本，从 ES1 到 ES5 。&lt;br /&gt;
该标准在2015年后将每年发布一次，所以最新的标准应为 ES2016 。&lt;br /&gt;
但是因为 ES2016 之比 ES2015 增加了两个 feature ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Array.prototype.includes (Domenic Denicola, Rick Waldron)&lt;/li&gt;
&lt;li&gt;Exponentiation Operator (Rick Waldron)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以还是从 ES6/ES2015 这个阶段的标准开始认识 ECMAscript 吧。&lt;/p&gt;
&lt;p&gt;** 更多关于 ES 的历史请看 &lt;a href="http://es6.ruanyifeng.com/#docs/intro"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;环境准备&lt;/h3&gt;
&lt;h4 id="nodejs"&gt;nodejs&lt;/h4&gt;
&lt;p&gt;在这个时间点上，nodejs 已经发布了 v6 版本，具体的版本号为 v6.3.0。&lt;br /&gt;
其已经涵盖了绝大多数 ES6 的特性，故而安装此最新版本。&lt;/p&gt;
&lt;h4 id="babel"&gt;babel 转换器&lt;/h4&gt;
&lt;p&gt;Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。&lt;br /&gt;
可使用 npm 安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install --save-dev babel-cli
npm install --save-dev babel-polyfill
npm install --save-dev babel-preset-react
&lt;/pre&gt;&lt;/div&gt;</summary><category term="javascript"></category><category term="ECMAscript"></category><category term="ES2015"></category></entry><entry><title>Django获取真实客户端IP</title><link href="http://blog.oyhy.me/django-client-ip.html" rel="alternate"></link><published>2015-11-10T00:00:00+08:00</published><author><name>Ronald White</name></author><id>tag:blog.oyhy.me,2015-11-10:django-client-ip.html</id><summary type="html">&lt;p&gt;Django 老的版本（&amp;lt;=1.6）里一般用 &lt;code&gt;request.META&lt;/code&gt; 的 &lt;code&gt;REMOTE_ADDR&lt;/code&gt; 或者&lt;code&gt;HTTP_X_FORWARDED_FOR&lt;/code&gt; 判断而来。如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_client_ip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x_forwarded_for&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x_forwarded_for&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新版本的 &lt;code&gt;HttpRequest&lt;/code&gt; 对象具有一个&lt;code&gt;get_host&lt;/code&gt; 的方法，可以获取客户端的真实IP，在使用反向代理的情况下，还需要配置 settings 中的 &lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt; 为 &lt;code&gt;True&lt;/code&gt;。&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>Django Celery 配置</title><link href="http://blog.oyhy.me/django-celery-settings.html" rel="alternate"></link><published>2015-07-14T00:00:00+08:00</published><author><name>Ronald White</name></author><id>tag:blog.oyhy.me,2015-07-14:django-celery-settings.html</id><summary type="html">&lt;p&gt;下面这个例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Redis&lt;/code&gt; 作为 broker 和 result backend 。&lt;/li&gt;
&lt;li&gt;配置了任务日志。&lt;/li&gt;
&lt;li&gt;添加了一个5分钟的周期性任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Django settings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;BROKER_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redis://localhost/1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CELERY_RESULT_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redis://localhost/2&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CELERYD_NODES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w1 w2 w3&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CELERYD_MULTI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;celery multi&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CELERY_TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia/Shanghai&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CELERY_ACCEPT_CONTENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pickle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;CELERYD_LOG_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/log/celery/%N.log&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CELERYD_PID_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/run/celery/%N.pid&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;
&lt;span class="n"&gt;CELERYBEAT_SCHEDULE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;update-access-token-every-5-min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;myproject.tasks.workerfunc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;schedule&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;开发环境的命令行&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;celery -A wxtest worker -l info -B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;发布环境的命令行&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;celery -A wxtest beat -s celery_beat_file&lt;/code&gt;&lt;/p&gt;</summary><category term="django"></category><category term="python"></category><category term="celery"></category></entry></feed>