<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>OYHY.ME</title><link href="http://blog.oyhy.me/" rel="alternate"></link><link href="http://blog.oyhy.me/feeds/all.atom.xml" rel="self"></link><id>http://blog.oyhy.me/</id><updated>2016-08-10T00:00:00+08:00</updated><entry><title>ECMAscript Startup (1)</title><link href="http://blog.oyhy.me/es-startup-01.html" rel="alternate"></link><published>2016-08-10T00:00:00+08:00</published><author><name>Ronald White</name></author><id>tag:blog.oyhy.me,2016-08-10:es-startup-01.html</id><summary type="html">&lt;h3&gt;ECMAscript 简介&lt;/h3&gt;
&lt;p&gt;ECMAscript 简称 ES。之前 ECMAscript 发布了5个版本，从 ES1 到 ES5 。&lt;br /&gt;
该标准在2015年后将每年发布一次，所以最新的标准应为 ES2016 。&lt;br /&gt;
但是因为 ES2016 之比 ES2015 增加了两个 feature ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Array.prototype.includes (Domenic Denicola, Rick Waldron)&lt;/li&gt;
&lt;li&gt;Exponentiation Operator (Rick Waldron)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以还是从 ES6/ES2015 这个阶段的标准开始认识 ECMAscript 吧。&lt;/p&gt;
&lt;p&gt;** 更多关于 ES 的历史请看 &lt;a href="http://es6.ruanyifeng.com/#docs/intro"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;环境准备&lt;/h3&gt;
&lt;h4&gt;nodejs&lt;/h4&gt;
&lt;p&gt;在这个时间点上，nodejs 已经发布了 v6 版本，具体的版本号为 v6.3.0。&lt;br /&gt;
其已经涵盖了绝大多数 ES6 的特性，故而安装此最新版本。&lt;/p&gt;
&lt;h4&gt;babel 转换器&lt;/h4&gt;
&lt;p&gt;Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。&lt;br /&gt;
可使用 npm 安装：&lt;/p&gt;
&lt;pre&gt;&lt;code class="sh"&gt;npm install --save-dev babel-cli
npm install --save-dev babel-polyfill
npm install --save-dev babel-preset-react
&lt;/code&gt;&lt;/pre&gt;</summary><category term="javascript"></category><category term="ECMAscript"></category><category term="ES2015"></category></entry><entry><title>Django获取真实客户端IP</title><link href="http://blog.oyhy.me/django-client-ip.html" rel="alternate"></link><published>2015-11-10T00:00:00+08:00</published><author><name>Ronald White</name></author><id>tag:blog.oyhy.me,2015-11-10:django-client-ip.html</id><summary type="html">&lt;p&gt;Django 老的版本（&amp;lt;=1.6）里一般用 &lt;code&gt;request.META&lt;/code&gt; 的 &lt;code&gt;REMOTE_ADDR&lt;/code&gt; 或者&lt;code&gt;HTTP_X_FORWARDED_FOR&lt;/code&gt; 判断而来。如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;def get_client_ip(request):
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新版本的 &lt;code&gt;HttpRequest&lt;/code&gt; 对象具有一个&lt;code&gt;get_host&lt;/code&gt; 的方法，可以获取客户端的真实IP，在使用反向代理的情况下，还需要配置 settings 中的 &lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt; 为 &lt;code&gt;True&lt;/code&gt;。&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>Django Celery 配置</title><link href="http://blog.oyhy.me/django-celery-settings.html" rel="alternate"></link><published>2015-07-14T00:00:00+08:00</published><author><name>Ronald White</name></author><id>tag:blog.oyhy.me,2015-07-14:django-celery-settings.html</id><summary type="html">&lt;p&gt;下面这个例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Redis&lt;/code&gt; 作为 broker 和 result backend 。&lt;/li&gt;
&lt;li&gt;配置了任务日志。&lt;/li&gt;
&lt;li&gt;添加了一个5分钟的周期性任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Django settings:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;BROKER_URL = 'redis://localhost/1'
CELERY_RESULT_BACKEND = 'redis://localhost/2'
CELERYD_NODES = 'w1 w2 w3'
CELERYD_MULTI = 'celery multi'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_ACCEPT_CONTENT = ['pickle', 'json']
CELERYD_LOG_FILE=&amp;quot;/var/log/celery/%N.log&amp;quot;
CELERYD_PID_FILE=&amp;quot;/var/run/celery/%N.pid&amp;quot;
from datetime import timedelta
CELERYBEAT_SCHEDULE = {
    'update-access-token-every-5-min': {
        'task': 'myproject.tasks.workerfunc',
        'schedule': timedelta(minutes=5),
        'args': [],
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;开发环境的命令行&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;celery -A wxtest worker -l info -B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;发布环境的命令行&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;celery -A wxtest beat -s celery_beat_file&lt;/code&gt;&lt;/p&gt;</summary><category term="django"></category><category term="python"></category><category term="celery"></category></entry></feed>